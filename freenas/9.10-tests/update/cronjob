#!/usr/local/bin/bash
# License: BSD
# Location for tests into REST API of FreeNAS 9.10
# Resty Docs: https://github.com/micha/resty
# jsawk: https://github.com/micha/jsawk

# List the other modules which must be run before this module can execute
REQUIRES=""
export REQUIRES

cronjob_tests() {
  set_test_group_text "1 - Update - Cron tests" "5"
  CLASSNAME=ixbuild.resty.functional.delete.cron

  TESTFILE="/tmp/.testFileCreatedViaCronjob"
  UPDATED_TESTFILE="/tmp/.testFileUpdatedViaCronjob"
  CRONJOB_ID=1

  # Update cronjob test filename in cron_command
  echo_test_title "Updating cronjob test filename in cron_command.."
  rest_request "PUT" "/tasks/cronjob/${CRONJOB_ID}/" '{ "cron_command": "touch '${UPDATED_TESTFILE}'" }'
  check_rest_response "200"

  # Remove old test file from remote system
  ssh_test "rm -f ${TESTFILE}"

  # Check that cronjob is reported as having the command updated
  echo_test_title "Checking that API reports the cronjob as updated.."
  rest_request "GET" "/tasks/cronjob/${CRONJOB_ID}/"
  check_rest_response "200 OK" || return 1
  CRONJOBCMD=$(cat ${RESTYOUT} | ${JSAWK} 'return this.cron_command')
  echo -n "CRONJOBCMD: $CRONJOBCMD"
  echo $CRONJOBCMD | grep -q "touch ${UPDATED_TESTFILE}"
  if [ $? -eq 0 ]; then
    echo_ok
  else
    echo_fail
  fi

  # Give time for cronjob to run again, then ensure the file was created
  sleep 61

  # Ensure updated test file does exist
  echo_test_title "Verify cronjob has created the test file.."
  ssh_test "test -f ${UPDATED_TESTFILE}"
  if [ $? -eq 0 ]; then
    echo_ok
  else
    echo_fail
  fi

  # Update cronjob to disabled with new cron_command
  echo_test_title "Updating cron job status to disabled, updating command.."
  rest_request "PUT" "/tasks/cronjob/${CRONJOB_ID}/" '{ "cron_enabled": "true", "cron_command": "touch '${UPDATED_TESTFILE}'" }'
  check_rest_response "200"

  # Check that cronjob is reported as having the command updated
  echo_test_title "Checking that API reports the cronjob as updated.."
  rest_request "GET" "/tasks/cronjob/${CRONJOB_ID}/"
  check_rest_response "200 OK" || return 1
  CRONJOBENABLED=$(cat ${RESTYOUT} | ${JSAWK} 'return this.cron_enabled')
  echo -n "CRONJOBENABLED: $CRONJOBENABLED"
  echo $CRONJOBENABLED | grep -q 'true'
  if [ $? -eq 0 ]; then
    echo_ok
  else
    echo_fail
  fi  
}

# Init function, this is called after module is sourced
# Pre-Set variables
# TESTSET = ( SMOKE / COMPLETE / BENCHMARK )
cronjob_init()
{
  # Run all the storage tests
  case $TESTSET in
        SMOKE) cronjob_tests ;;
     COMPLETE) cronjob_tests ;;
    BENCHMARK) ;;
            *) cronjob_tests ;;
  esac
}
