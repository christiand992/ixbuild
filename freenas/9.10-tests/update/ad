#!/usr/local/bin/bash
# Author: Joe Maloney
# License: BSD
# Location for tests into REST API of FreeNAS 9.10
# Resty Docs: https://github.com/micha/resty
# jsawk: https://github.com/micha/jsawk

# List the other modules which must be run before this module can execute
REQUIRES=""
export REQUIRES

ad_tests() {
  set_test_group_text "2 - Update - Active Directory tests" "19"

  if [ -z "$ADUSERNAME" -o -z "$ADPASSWORD" ] ; then
     echo "Missing the ADUSERNAME / ADPASSWORD settings, test skipped.."
     echo_skipped
     add_xml_result "skipped" "Skipped due to missing AD settings"
     return 0
  fi

  # Enable Active Directory Directory
  echo_test_title "Enabling Active Directory.."
  rest_request "PUT" "/directoryservice/activedirectory/1/" '{ "ad_bindpw": "'${ADPASSWORD}'", "ad_bindname": "'${ADUSERNAME}'", "ad_domainname": "'${BRIDGEDOMAIN}'", "ad_netbiosname_a": "'${BRIDGEHOST}'", "ad_idmap_backend": "rid", "ad_enable":true }'
  check_rest_response "200 OK"

  # Check Active Directory
  echo_test_title "Checking Active Directory.."
  rest_request GET "/directoryservice/activedirectory/"
  check_rest_response "200 OK" || return 1
  ADSTATUS=$(cat ${RESTYOUT} | ${JSAWK} 'return this.ad_enable')
  echo "ADSTATUS: $ADSTATUS"
  echo $ADSTATUS | grep -q 'true'
  if [ $? -eq 0 ] ; then
    echo_ok
  else

    echo_fail
  fi

  echo_test_title "Checking to see if CIFS service is enabled"
  rest_request "GET" "/services/services/cifs/"
  check_rest_response "200 OK" || return 1
  CIFSSTATUS=$(cat ${RESTYOUT} | ${JSAWK} 'return this.srv_enable')
  echo "CIFSSTATUS: $CIFSSTATUS"
  echo $CIFSSTATUS | grep -q 'true'
  if [ $? -eq 0 ] ; then
    echo_ok
  else

    echo_test_title "Enabling CIFS service"
    rest_request "PUT" "/services/cifs/" '{ "cifs_srv_description": "Test FreeNAS Server", "cifs_srv_guest": "nobody", "cifs_hostname_lookup": false, "cifs_srv_aio_enable": false }'
    check_rest_response "200 OK"

    # Now start the service
    echo_test_title "Starting CIFS service"
    rest_request "PUT" "/services/services/cifs/" '{ "srv_enable": true }'
    check_rest_response "200 OK"

    echo_ok
  fi

  echo_test_title "Changing permissions on /mnt/tank/cifs"
  rest_request "PUT" "/storage/permission/" '{ "mp_path": "/mnt/tank/cifs", "mp_acl": "unix", "mp_mode": "777", "mp_user": "root", "mp_group": "AD01\\QA", "mp_recursive": true }'
  check_rest_response "201 CREATED"   

  # Wait a moment for samba to spin up
  sleep 4

  # Now check if we can mount NFS / create / rename / copy / delete / umount
  echo_test_title "Creating CIFS mountpoint"
  rc_test "mkdir /tmp/cifs-mnt.$$" || return 1
  sync

  sleep 10

  # Store credentials file for mount_smb
  # The ADUSER user must exist in AD with this password
  echo "[TESTNAS:ADUSER]" > ~/.nsmbrc
  echo password=12345678 >> ~/.nsmbrc

  echo_test_title "Mounting CIFS"
  rc_test "mount_smbfs -N -I ${ip} -W AD01 //aduser@testnas/TestShare /tmp/cifs-mnt.$$" "rmdir /tmp/cifs-mnt.$$" || return 1

  echo_test_title "Creating CIFS file"
  rc_test "touch /tmp/cifs-mnt.$$/testfile" "umount /tmp/cifs-mnt.$$ ; rmdir /tmp/cifs-mnt.$$" || return 1

  echo_test_title "Moving CIFS file"
  rc_test "mv /tmp/cifs-mnt.$$/testfile /tmp/cifs-mnt.$$/testfile2" || return 1

  echo_test_title "Copying CIFS file"
  rc_test "cp /tmp/cifs-mnt.$$/testfile2 /tmp/cifs-mnt.$$/testfile" || return 1

  echo_test_title "Deleting CIFS file"
  rc_test "rm /tmp/cifs-mnt.$$/testfile2" || return 1

  echo_test_title "Unmounting CIFS"
  rc_test "umount /tmp/cifs-mnt.$$" || return 1

  echo_test_title "Removing CIFS mountpoint"
  rc_test "rmdir /tmp/cifs-mnt.$$" || return 1

  # Disable Active Directory Directory
  echo_test_title "Disabling Active Directory.."
  rest_request "PUT" "/directoryservice/activedirectory/1/" '{ "ad_bindpw": "'${ADPASSWORD}'", "ad_bindname": "'${ADUSERNAME}'", "ad_domainname": "'${BRIDGEDOMAIN}'", "ad_netbiosname_a": "'${BRIDGEHOST}'", "ad_idmap_backend": "rid", "ad_enable":"false" }'
  check_rest_response "200 OK"

  return 0
}

# Init function, this is called after module is sourced
# Pre-Set variables
# TESTSET = ( SMOKE / COMPLETE / BENCHMARK )
ad_init()
{
  # Run all the tests
  case $TESTSET in
        SMOKE) ad_tests ; return $? ;;
     COMPLETE) ad_tests ; return $? ;;
    BENCHMARK) ;;
            *) ad_tests ; return $? ;;
  esac
}
