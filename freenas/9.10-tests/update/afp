#!/usr/local/bin/bash
# Author: Joe Maloney
# License: BSD
# Location for tests into REST API of FreeNAS 9.10
# Resty Docs: https://github.com/micha/resty
# jsawk: https://github.com/micha/jsawk

# List the other modules which must be run before this module can execute
REQUIRES=""
export REQUIRES

afp_tests()
{

  # Set the test count based on config settings
  TEST_CNT="2"
  if [ ! -z "${OSX_HOST}" -o ! -z "${BRIDGEIP}" ]; then
    TEST_CNT="6"
  fi

  # Set the group text and number of tests
  set_test_group_text "2 - Update - AFP tests" "${TEST_CNT}"
  CLASSNAME=ixbuild.resty.functional.update.afp

  AFP_SHARE="My AFP Share"
  AFP_PATH="/mnt/tank/afp"

  echo_test_title "Updating AFP service"
  rest_request "PUT" "/services/afp/" '{ "afp_srv_connections_limit": "100"  }'
  check_rest_response "200" || return 1

  echo_test_title "Checking to see if AFP service is enabled"
  rest_request "GET" "/services/services/afp/"
  check_rest_response "200 OK" || return 1
  AFPSTATUS=$(cat ${RESTYOUT} | ${JSAWK} 'return this.srv_state')
  echo -n "AFPSTATUS: $AFPSTATUS"
  echo $AFPSTATUS | grep -q 'RUNNING'
  if [ $? -eq 0 ] ; then
    echo_ok
  else
    echo_fail
  fi

  # Verify mountability and permissions of AFP share after config changes
  if [ ! -z "${OSX_HOST}" -o ! -z "${BRIDGEIP}" ]; then
    # Mount share on OSX system and create a test file
    echo_test_title "Mounting AFP share via OSX and creating a test file"
    osx_test 'mkdir -p "/Volumes/'"${AFP_SHARE}"'" && mount -t afp "afp://'${BRIDGEIP}'/'"${AFP_SHARE}"'" "/Volumes/'"${AFP_SHARE}"'" && touch "/Volumes/'"${AFP_SHARE}"'/testfile.txt"'
    if [ $? -eq 0 ]; then
      echo_ok
    else
      echo_fail
      return 1
    fi  

    # Move test file to a new location on the AFP share
    echo_test_title "Moving AFP test file into a new directory"
    osx_test 'mkdir -p "/Volumes/'"${AFP_SHARE}"'/tmp" && mv "/Volumes/'"${AFP_SHARE}"'/testfile.txt" "/Volumes/'"${AFP_SHARE}"'/tmp/testfile.txt"'
    if [ $? -eq 0 ]; then
      echo_ok
    else
      echo_fail
      return 1
    fi  

    # Delete test file and test directory from AFP share
    echo_test_title "Deleting test file and directory from AFP share"
    osx_test 'rm -f "/Volumes/'"${AFP_SHARE}"'/tmp/testfile.txt" && rmdir "/Volumes/'"${AFP_SHARE}"'/tmp" && find -- "/Volumes/'"${AFP_SHARE}"'/" -prune -type d -empty | grep -q .'
    if [ $? -eq 0 ]; then
      echo_ok
    else
      echo_fail
      return 1
    fi  

    # Clean up mounted AFP share
    echo_test_title "Unmount AFP share"
    osx_test 'umount "/Volumes/'"${AFP_SHARE}"'"'
    if [ $? -eq 0 ]; then
      echo_ok
    else
      echo_fail
    fi  
  fi  
}

# Init function, this is called after module is sourced
# Pre-Set variables
# TESTSET = ( SMOKE / COMPLETE / BENCHMARK )
afp_init()
{
  # Run all the smb tests
  case $TESTSET in
        SMOKE) afp_tests ; return $? ;;
     COMPLETE) afp_tests ; return $? ;;
    BENCHMARK) ;;
            *) afp_tests ; return $? ;;
  esac
}

