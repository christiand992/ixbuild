#!/usr/bin/env bash
# Author: Kris Moore
# License: BSD
# Location for tests into REST API of FreeNAS 9.10
# Resty Docs: https://github.com/micha/resty
# jsawk: https://github.com/micha/jsawk

# List the other modules which must be run before this module can execute
REQUIRES="storage"
export REQUIRES

afp_bsd_tests()
{
  AFP_NAME="My AFP Share"
  AFP_PATH="/mnt/tank/afp_bsd"

  # Set the test count based on config settings
  TESTS_CNT="7"
  if [ -n "${OSX_HOST}" -a -n "${BRIDGEIP}" ]; then
    TESTS_CNT="9"

    # Clean up any leftover items from previous failed AFP runs
    osx_test 'umount -f "/Volumes/'"${BRIDGEHOST}"'"; rmdir "/Volumes/'"${BRIDGEHOST}"'"; exit 0'
  fi

  # Set the group text and number of tests
  set_test_group_text "1 - Create - AFP BSD tests" "${TESTS_CNT}"
  CLASSNAME=ixbuild.resty.functional.create.afp_bsd

  echo_test_title "Creating AFP dataset"
  rest_request "POST" "/storage/volume/tank/datasets/" '{ "name": "afp_bsd" }'
  check_rest_response "201 Created" || return 1

  echo_test_title "Enabling AFP service"
  if [ -n "${BRIDGEIP}" ]; then
    rest_request "PUT" "/services/afp/" '{ "afp_srv_guest": true, "afp_srv_bindip": "'"${BRIDGEIP}"'" }'
  else
    rest_request "PUT" "/services/afp/" '{ "afp_srv_guest": true }'
  fi
  check_rest_response "200 OK" || return 1

  echo_test_title "Starting AFP service"
  rest_request "PUT" "/services/services/afp/" '{ "srv_enable": true }'
  check_rest_response "200 OK" || return 1

  echo_test_title "Checking to see if AFP service is enabled"
  rest_request "GET" "/services/services/afp/"
  check_service_status "RUNNING" || return 1

  echo_test_title "Changing permissions on ${AFP_PATH}"
  rest_request "PUT" "/storage/permission/" '{ "mp_path": "'${AFP_PATH}'", "mp_acl": "unix", "mp_mode": "777", "mp_user": "root", "mp_group": "wheel" }'
  check_rest_response "201 Created" || return 1

  echo_test_title "Creating a AFP share on ${AFP_PATH}"
  rest_request "POST" "/sharing/afp/" '{ "afp_name": "'"${AFP_NAME}"'", "afp_path": "/mnt/tank/afp_bsd" }'
  check_rest_response "201 Created" || return 1

  if [ -n "${BRIDGEIP}" ]; then
    echo_test_title "Poll VM to ensure AFP service is up and running"
    wait_for_avail_port "548"
    check_exit_status || return 1

    # TODO - Need a way to mount or communicate with AFP locally on BSD systems
    #echo_test_title "Creating AFP mountpoint locally"
    #rc_test "mkdir -p /tmp/afp-mnt.$$"

    #echo_test_title "Mounting AFP share locally"
    #rc_test "mount -t afp afp://${BRIDGEIP}/${AFP_NAME} /tmp/afp-mnt.$$" || return 1
  fi

  echo_test_title "Verify AFP service can be disabled.."
  rest_request "PUT" "/services/afp/" '{ "afp_srv_guest": false }'
  check_rest_response "200 OK" || return 1

  echo_test_title "Verify AFP dataset can be destroyed.."
  rest_request "DELETE" "/storage/volume/1/datasets/afp_bsd/"
  check_rest_response "204" || return 1

  return 0
}

# Init function, this is called after module is sourced
# Pre-Set variables
# TESTSET = ( SMOKE / COMPLETE / BENCHMARK )
afp_bsd_init()
{
  # Run all the smb tests
  case $TESTSET in
        SMOKE) afp_bsd_tests ; return $? ;;
     COMPLETE) afp_bsd_tests ; return $? ;;
    BENCHMARK) ;;
            *) afp_bsd_tests ; return $? ;;
  esac
}

