#!/usr/local/bin/bash
# Author: Joe Maloney
# License: BSD
# Location for tests into REST API of FreeNAS 9.10
# Resty Docs: https://github.com/micha/resty
# jsawk: https://github.com/micha/jsawk

# List the other modules which must be run before this module can execute
REQUIRES="ssh"
export REQUIRES

system_tests() {
  set_test_group_text "1 - Create - System tests" "7"
  CLASSNAME=ixbuild.resty.functional.create.system

  # Get system version
  echo_test_title "Checking system version.."
  rest_request "GET" "/system/version/"
  check_rest_response "200 OK"

  # Set the timezone
  echo_test_title "Setting timezone.."
  rest_request "PUT" "/system/settings/" '{ "stg_timezone": "America/New_York" }'
  check_rest_response "200 OK"

  # Create loader tunable
  echo_test_title "Creating system tunable 'dummynet'.."
  rest_request "POST" "/system/tunable/" '{ "tun_var": "dummynet_load", "tun_enabled": true, "tun_value": "YES", "tun_type": "loader" }'
  check_rest_response "201 Created"

  # Check loader tunable
  echo_test_title "Checking system tunable 'dummynet'.."
  rest_request GET "/system/tunable/"
  check_rest_response "200 OK" || return 1
  TUNSTATUS=$(cat ${RESTYOUT} | ${JSAWK} 'return this.tun_var')
  echo "TUNSTATUS: $TUNSTATUS"
  echo $TUNSTATUS | grep -q 'dummynet_load'
  if [ $? -eq 0 ] ; then
    echo_ok
  else
    echo_fail
  fi

  # Reboot system to enable tunable
  echo_test_title "Reboot system to enable tunable.."
  rest_request "POST" "/system/reboot"
  check_rest_response "202"

  # Wait for network come back up
  echo_test_title "Waiting for $VM to verify tunables.."
  sleep 30
  wait_for_avail

  # Verify loader tunable
  echo_test_title "Verify system tunable 'dummynet_load'.."
  set_defaults
  ssh_test "kldstat -m dummynet"
  if [ ! $? -eq 0 ] ; then
    echo "KLDSTAT: $KLDSTAT_LINUX_LOAD"
    return 1
  fi
}

# Init function, this is called after module is sourced
# Pre-Set variables
# TESTSET = ( SMOKE / COMPLETE / BENCHMARK )
system_init()
{
  # Run all the tests
  case $TESTSET in
        SMOKE) system_tests ; return $? ;;
     COMPLETE) system_tests ; return $? ;;
    BENCHMARK) ;;
            *) system_tests ; return $? ;;
  esac
}
